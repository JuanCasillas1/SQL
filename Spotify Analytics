This project was made in SQLiteStudio

For this project, I downloaded Spotify data from Kaggle
at https://www.kaggle.com/datasets/equinxx/spotify-top-50-songs-in-2021?resource=download
and imported the data after creating the table (row 28)

/*Creating the table*/
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

/*What are the top 10 most popular artists and their respetcive popularity?*/
SELECT  artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10


/*What is the longest song?*/
SELECT track_name, duration_ms
FROM Spotifydata
ORDER BY duration_ms desc LIMIT 1
/*Can't believe a reggaeton song is the longest one*/


/*Tells if a song is danceable or not taking the average danceability as frontier value*/
SELECT 
    s.track_name, 
    s.danceability,
    frontier,
    CASE 
        WHEN s.danceability > frontier THEN 'Go dance'
        WHEN s.danceability < frontier THEN 'Dont bother'
        ELSE 'Undecided' 
    END AS Is_it_danceable
FROM 
    Spotifydata AS s
    JOIN (SELECT AVG(danceability) AS frontier FROM Spotifydata) AS f
    ON 1=1;
 /*The last idea of joining the table with itself was provided by ChatGPT. I was stuck as to how to establish a frontier and asked it.*/
 
 
Demostrations of CTEs aka Temporary Tables

/*Calculates the average popularity for the artists in the Spotify data table.
Then, for every artist with an average popularity of 90 or above, show their name, 
their average popularity, and label them as a “Top Star”.*/
    WITH average_pop AS 
( SELECT artist_name, AVG(popularity) as average_popularity
FROM Spotifydata
GROUP BY artist_name)

SELECT  artist_name,
        average_popularity,
        'Top Star' as Type_of_Star
FROM average_pop
WHERE average_popularity>=90;


 
    
    
